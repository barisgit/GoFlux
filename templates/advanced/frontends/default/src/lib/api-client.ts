// @ts-nocheck
// Auto-generated tRPC-like API client from Go routes
// Generated by GoFlux type generation system
// Do not edit manually

import { useQuery, useMutation, useQueryClient, queryOptions } from '@tanstack/react-query'
import type { UseQueryOptions, UseMutationOptions, QueryKey } from '@tanstack/react-query'
import type { CreatePostRequest, CreateUserRequest, DeletePostOutputBody, DeleteUserOutputBody, Post, UpdatePostRequest, UpdateUserRequest, User } from '../types/generated'

export interface TRPCError {
  message: string
  code: string
  data?: any
}

async function trpcRequest<T>(path: string, options: RequestInit = {}): Promise<T> {
  const response = await fetch(`/api${path}`, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  })

  if (!response.ok) {
    const errorData = await response.text()
    throw new Error(errorData || `HTTP ${response.status}: ${response.statusText}`)
  }

  return response.json()
}

// Query key factory
export const queryKeys = {
  users: {
    all: () => ['users'] as const,
    list: () => [...queryKeys.users.all(), 'list'] as const,
    detail: (id: string | number) => [...queryKeys.users.all(), 'detail', id] as const,
  },
  posts: {
    all: () => ['posts'] as const,
    list: () => [...queryKeys.posts.all(), 'list'] as const,
    detail: (id: string | number) => [...queryKeys.posts.all(), 'detail', id] as const,
  },

}

export const api = {
  posts: {
    /**
     * Create a new post in the system
     */
    create: {
      useMutation: (options?: UseMutationOptions<Post, Error, Omit<CreatePostRequest, 'id'>>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<Post>(`/posts`, {
              method: 'POST',
              body: JSON.stringify(variables),
            })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<Post, Error, Omit<CreatePostRequest, 'id'>>, 'mutationFn'>) => ({
        mutationFn: (variables: Omit<CreatePostRequest, 'id'>) => {
          return trpcRequest<Post>(`/posts`, {
            method: 'POST',
            body: JSON.stringify(variables),
          })
        },
        ...options,
      }),
      mutate: async (data: Omit<CreatePostRequest, 'id'>): Promise<Post> => {
        return trpcRequest<Post>(`/posts`, {
          method: 'POST',
          body: JSON.stringify(data),
        })
      }
    } ,
    /**
     * Delete a post from the system

    Parameters:
    - id: Post ID
     */
    delete: {
      useMutation: (options?: UseMutationOptions<DeletePostOutputBody, Error, number>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<DeletePostOutputBody>(`/posts/`, { method: 'DELETE' })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<DeletePostOutputBody, Error, number>, 'mutationFn'>) => ({
        mutationFn: (variables: number) => {
          return trpcRequest<DeletePostOutputBody>(`/posts/`, { method: 'DELETE' })
        },
        ...options,
      }),
      mutate: async (id: number): Promise<DeletePostOutputBody> => {
        return trpcRequest<DeletePostOutputBody>(`/posts/${id}`, { method: 'DELETE' })
      }
    } ,
    /**
     * Retrieve a specific post by its ID

    Parameters:
    - id: Post ID
     */
    get: {
      useQuery: (id: number, options?: Omit<UseQueryOptions<Post, Error>, 'queryKey' | 'queryFn'>) => {
        return useQuery({
          queryKey: ['posts/{id}', id],
          queryFn: () => trpcRequest<Post>(`/posts/${id}`),
          ...options,
        })
      },
      queryOptions: (id: number) => queryOptions({
        queryKey: ['posts/{id}', id] as const,
        queryFn: () => trpcRequest<Post>(`/posts/${id}`),
      }),
      query: async (id: number): Promise<Post> => {
        return trpcRequest<Post>(`/posts/${id}`)
      }
    } ,
    /**
     * Retrieve a list of all posts in the system
     */
    list: {
      useQuery: (options?: Omit<UseQueryOptions<Post[], Error>, 'queryKey' | 'queryFn'>) => {
        return useQuery({
          queryKey: ['posts'],
          queryFn: () => trpcRequest<Post[]>(`/posts`),
          ...options,
        })
      },
      queryOptions: () => queryOptions({
        queryKey: ['posts'] as const,
        queryFn: () => trpcRequest<Post[]>(`/posts`),
      }),
      query: async (): Promise<Post[]> => {
        return trpcRequest<Post[]>(`/posts`)
      }
    } ,
    /**
     * Update an existing post's information

    Parameters:
    - id: Post ID
     */
    update: {
      useMutation: (options?: UseMutationOptions<Post, Error, { id: number; data: Partial<UpdatePostRequest> }>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<Post>(`/posts/${variables.id}`, {
              method: 'PUT',
              body: JSON.stringify(variables.data),
            })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<Post, Error, { id: number; data: Partial<UpdatePostRequest> }>, 'mutationFn'>) => ({
        mutationFn: (variables: { id: number; data: Partial<UpdatePostRequest> }) => {
          return trpcRequest<Post>(`/posts/${variables.id}`, {
            method: 'PUT',
            body: JSON.stringify(variables.data),
          })
        },
        ...options,
      }),
      mutate: async (id: number, data: Partial<UpdatePostRequest>): Promise<Post> => {
        return trpcRequest<Post>(`/posts/${id}`, {
          method: 'PUT',
          body: JSON.stringify(data),
        })
      }
    } ,
    user: {
      /**
       * Retrieve all posts created by a specific user

      Parameters:
      - userId: User ID
       */
      get: {
        useQuery: (id: number, options?: Omit<UseQueryOptions<Post[], Error>, 'queryKey' | 'queryFn'>) => {
          return useQuery({
            queryKey: ['posts/user/{userId}', id],
            queryFn: () => trpcRequest<Post[]>(`/posts/user/${id}`),
            ...options,
          })
        },
        queryOptions: (id: number) => queryOptions({
          queryKey: ['posts/user/{userId}', id] as const,
          queryFn: () => trpcRequest<Post[]>(`/posts/user/${id}`),
        }),
        query: async (id: number): Promise<Post[]> => {
          return trpcRequest<Post[]>(`/posts/user/${id}`)
        }
      } 
    }
  },
  users: {
    /**
     * Create a new user in the system
     */
    create: {
      useMutation: (options?: UseMutationOptions<User, Error, Omit<CreateUserRequest, 'id'>>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<User>(`/users`, {
              method: 'POST',
              body: JSON.stringify(variables),
            })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<User, Error, Omit<CreateUserRequest, 'id'>>, 'mutationFn'>) => ({
        mutationFn: (variables: Omit<CreateUserRequest, 'id'>) => {
          return trpcRequest<User>(`/users`, {
            method: 'POST',
            body: JSON.stringify(variables),
          })
        },
        ...options,
      }),
      mutate: async (data: Omit<CreateUserRequest, 'id'>): Promise<User> => {
        return trpcRequest<User>(`/users`, {
          method: 'POST',
          body: JSON.stringify(data),
        })
      }
    } ,
    /**
     * Delete a user from the system

    Parameters:
    - id: User ID
     */
    delete: {
      useMutation: (options?: UseMutationOptions<DeleteUserOutputBody, Error, number>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<DeleteUserOutputBody>(`/users/`, { method: 'DELETE' })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<DeleteUserOutputBody, Error, number>, 'mutationFn'>) => ({
        mutationFn: (variables: number) => {
          return trpcRequest<DeleteUserOutputBody>(`/users/`, { method: 'DELETE' })
        },
        ...options,
      }),
      mutate: async (id: number): Promise<DeleteUserOutputBody> => {
        return trpcRequest<DeleteUserOutputBody>(`/users/${id}`, { method: 'DELETE' })
      }
    } ,
    /**
     * Retrieve a specific user by their ID

    Parameters:
    - id: User ID
     */
    get: {
      useQuery: (id: number, options?: Omit<UseQueryOptions<User, Error>, 'queryKey' | 'queryFn'>) => {
        return useQuery({
          queryKey: ['users/{id}', id],
          queryFn: () => trpcRequest<User>(`/users/${id}`),
          ...options,
        })
      },
      queryOptions: (id: number) => queryOptions({
        queryKey: ['users/{id}', id] as const,
        queryFn: () => trpcRequest<User>(`/users/${id}`),
      }),
      query: async (id: number): Promise<User> => {
        return trpcRequest<User>(`/users/${id}`)
      }
    } ,
    /**
     * Retrieve a list of all users in the system
     */
    list: {
      useQuery: (options?: Omit<UseQueryOptions<User[], Error>, 'queryKey' | 'queryFn'>) => {
        return useQuery({
          queryKey: ['users'],
          queryFn: () => trpcRequest<User[]>(`/users`),
          ...options,
        })
      },
      queryOptions: () => queryOptions({
        queryKey: ['users'] as const,
        queryFn: () => trpcRequest<User[]>(`/users`),
      }),
      query: async (): Promise<User[]> => {
        return trpcRequest<User[]>(`/users`)
      }
    } ,
    /**
     * Update an existing user's information

    Parameters:
    - id: User ID
     */
    update: {
      useMutation: (options?: UseMutationOptions<User, Error, { id: number; data: Partial<UpdateUserRequest> }>) => {
        return useMutation({
          mutationFn: (variables) => {
            return trpcRequest<User>(`/users/${variables.id}`, {
              method: 'PUT',
              body: JSON.stringify(variables.data),
            })
          },
          ...options,
        })
      },
      mutationOptions: (options?: Omit<UseMutationOptions<User, Error, { id: number; data: Partial<UpdateUserRequest> }>, 'mutationFn'>) => ({
        mutationFn: (variables: { id: number; data: Partial<UpdateUserRequest> }) => {
          return trpcRequest<User>(`/users/${variables.id}`, {
            method: 'PUT',
            body: JSON.stringify(variables.data),
          })
        },
        ...options,
      }),
      mutate: async (id: number, data: Partial<UpdateUserRequest>): Promise<User> => {
        return trpcRequest<User>(`/users/${id}`, {
          method: 'PUT',
          body: JSON.stringify(data),
        })
      }
    } 
  }
}

export type API = typeof api 