package api

import (
	"{{.ModuleName}}/internal/service"
	"{{.ModuleName}}/internal/types"
	"context"
	"net/http"

	"github.com/danielgtaylor/huma/v2"
)

// SetupRoutes configures all API routes for Huma
func SetupRoutes(api huma.API, svc *service.Service) {
	// Users routes
	setupUserRoutes(api, svc)

	// Posts routes
	setupPostRoutes(api, svc)
}

// User route inputs and outputs

type GetUsersOutput struct {
	Body []types.User `json:"users" doc:"List of users"`
}

type GetUserInput struct {
	ID int `path:"id" minimum:"1" doc:"User ID" example:"1"`
}

type GetUserOutput struct {
	Body types.User `json:"user" doc:"User details"`
}

type CreateUserInput struct {
	Body types.CreateUserRequest `json:"user" doc:"User data to create"`
}

type CreateUserOutput struct {
	Body types.User `json:"user" doc:"Created user"`
}

type UpdateUserInput struct {
	ID   int                     `path:"id" minimum:"1" doc:"User ID" example:"1"`
	Body types.UpdateUserRequest `json:"user" doc:"User data to update"`
}

type UpdateUserOutput struct {
	Body types.User `json:"user" doc:"Updated user"`
}

type DeleteUserInput struct {
	ID int `path:"id" minimum:"1" doc:"User ID" example:"1"`
}

type DeleteUserOutput struct {
	Body struct {
		Message string `json:"message" example:"User deleted successfully" doc:"Success message"`
		ID      int    `json:"id" example:"1" doc:"Deleted user ID"`
	}
}

// Post route inputs and outputs

type GetPostsOutput struct {
	Body []types.Post `json:"posts" doc:"List of posts"`
}

type GetPostInput struct {
	ID int `path:"id" minimum:"1" doc:"Post ID" example:"1"`
}

type GetPostOutput struct {
	Body types.Post `json:"post" doc:"Post details"`
}

type CreatePostInput struct {
	Body types.CreatePostRequest `json:"post" doc:"Post data to create"`
}

type CreatePostOutput struct {
	Body types.Post `json:"post" doc:"Created post"`
}

type UpdatePostInput struct {
	ID   int                     `path:"id" minimum:"1" doc:"Post ID" example:"1"`
	Body types.UpdatePostRequest `json:"post" doc:"Post data to update"`
}

type UpdatePostOutput struct {
	Body types.Post `json:"post" doc:"Updated post"`
}

type DeletePostInput struct {
	ID int `path:"id" minimum:"1" doc:"Post ID" example:"1"`
}

type DeletePostOutput struct {
	Body struct {
		Message string `json:"message" example:"Post deleted successfully" doc:"Success message"`
		ID      int    `json:"id" example:"1" doc:"Deleted post ID"`
	}
}

type GetPostsByUserInput struct {
	UserID int `path:"userId" minimum:"1" doc:"User ID" example:"1"`
}

type GetPostsByUserOutput struct {
	Body []types.Post `json:"posts" doc:"List of posts by user"`
}

// User route handlers
func setupUserRoutes(api huma.API, svc *service.Service) {
	// GET /api/users
	huma.Register(api, huma.Operation{
		OperationID: "get-users",
		Method:      http.MethodGet,
		Path:        "/api/users",
		Summary:     "Get all users",
		Description: "Retrieve a list of all users in the system",
		Tags:        []string{"Users"},
	}, func(ctx context.Context, input *struct{}) (*GetUsersOutput, error) {
		users, err := svc.GetUsers(ctx)
		if err != nil {
			return nil, err
		}

		return &GetUsersOutput{Body: users}, nil
	})

	// GET /api/users/{id}
	huma.Register(api, huma.Operation{
		OperationID: "get-user",
		Method:      http.MethodGet,
		Path:        "/api/users/{id}",
		Summary:     "Get user by ID",
		Description: "Retrieve a specific user by their ID",
		Tags:        []string{"Users"},
	}, func(ctx context.Context, input *GetUserInput) (*GetUserOutput, error) {
		user, err := svc.GetUserByID(ctx, input.ID)
		if err != nil {
			return nil, err
		}
		if user == nil {
			return nil, huma.Error404NotFound("User not found")
		}

		return &GetUserOutput{Body: *user}, nil
	})

	// POST /api/users
	huma.Register(api, huma.Operation{
		OperationID:   "create-user",
		Method:        http.MethodPost,
		Path:          "/api/users",
		Summary:       "Create a new user",
		Description:   "Create a new user in the system",
		Tags:          []string{"Users"},
		DefaultStatus: http.StatusCreated,
	}, func(ctx context.Context, input *CreateUserInput) (*CreateUserOutput, error) {
		user, err := svc.CreateUser(ctx, &input.Body)
		if err != nil {
			return nil, err
		}

		return &CreateUserOutput{Body: *user}, nil
	})

	// PUT /api/users/{id}
	huma.Register(api, huma.Operation{
		OperationID: "update-user",
		Method:      http.MethodPut,
		Path:        "/api/users/{id}",
		Summary:     "Update user",
		Description: "Update an existing user's information",
		Tags:        []string{"Users"},
	}, func(ctx context.Context, input *UpdateUserInput) (*UpdateUserOutput, error) {
		user, err := svc.UpdateUser(ctx, input.ID, &input.Body)
		if err != nil {
			return nil, err
		}

		return &UpdateUserOutput{Body: *user}, nil
	})

	// DELETE /api/users/{id}
	huma.Register(api, huma.Operation{
		OperationID: "delete-user",
		Method:      http.MethodDelete,
		Path:        "/api/users/{id}",
		Summary:     "Delete user",
		Description: "Delete a user from the system",
		Tags:        []string{"Users"},
	}, func(ctx context.Context, input *DeleteUserInput) (*DeleteUserOutput, error) {
		err := svc.DeleteUser(ctx, input.ID)
		if err != nil {
			return nil, err
		}

		return &DeleteUserOutput{
			Body: struct {
				Message string `json:"message" example:"User deleted successfully" doc:"Success message"`
				ID      int    `json:"id" example:"1" doc:"Deleted user ID"`
			}{
				Message: "User deleted successfully",
				ID:      input.ID,
			},
		}, nil
	})
}

// Post route handlers
func setupPostRoutes(api huma.API, svc *service.Service) {
	// GET /api/posts
	huma.Register(api, huma.Operation{
		OperationID: "get-posts",
		Method:      http.MethodGet,
		Path:        "/api/posts",
		Summary:     "Get all posts",
		Description: "Retrieve a list of all posts in the system",
		Tags:        []string{"Posts"},
	}, func(ctx context.Context, input *struct{}) (*GetPostsOutput, error) {
		posts, err := svc.GetPosts(ctx)
		if err != nil {
			return nil, err
		}

		return &GetPostsOutput{Body: posts}, nil
	})

	// GET /api/posts/{id}
	huma.Register(api, huma.Operation{
		OperationID: "get-post",
		Method:      http.MethodGet,
		Path:        "/api/posts/{id}",
		Summary:     "Get post by ID",
		Description: "Retrieve a specific post by its ID",
		Tags:        []string{"Posts"},
	}, func(ctx context.Context, input *GetPostInput) (*GetPostOutput, error) {
		post, err := svc.GetPostByID(ctx, input.ID)
		if err != nil {
			return nil, err
		}
		if post == nil {
			return nil, huma.Error404NotFound("Post not found")
		}

		return &GetPostOutput{Body: *post}, nil
	})

	// POST /api/posts
	huma.Register(api, huma.Operation{
		OperationID:   "create-post",
		Method:        http.MethodPost,
		Path:          "/api/posts",
		Summary:       "Create a new post",
		Description:   "Create a new post in the system",
		Tags:          []string{"Posts"},
		DefaultStatus: http.StatusCreated,
	}, func(ctx context.Context, input *CreatePostInput) (*CreatePostOutput, error) {
		post, err := svc.CreatePost(ctx, &input.Body)
		if err != nil {
			return nil, err
		}

		return &CreatePostOutput{Body: *post}, nil
	})

	// PUT /api/posts/{id}
	huma.Register(api, huma.Operation{
		OperationID: "update-post",
		Method:      http.MethodPut,
		Path:        "/api/posts/{id}",
		Summary:     "Update post",
		Description: "Update an existing post's information",
		Tags:        []string{"Posts"},
	}, func(ctx context.Context, input *UpdatePostInput) (*UpdatePostOutput, error) {
		post := types.Post{
			ID:        input.ID,
			Title:     input.Body.Title,
			Content:   input.Body.Content,
			UserID:    input.Body.UserID,
			Published: input.Body.Published,
		}

		err := svc.UpdatePost(ctx, &post)
		if err != nil {
			return nil, err
		}

		return &UpdatePostOutput{Body: post}, nil
	})

	// DELETE /api/posts/{id}
	huma.Register(api, huma.Operation{
		OperationID: "delete-post",
		Method:      http.MethodDelete,
		Path:        "/api/posts/{id}",
		Summary:     "Delete post",
		Description: "Delete a post from the system",
		Tags:        []string{"Posts"},
	}, func(ctx context.Context, input *DeletePostInput) (*DeletePostOutput, error) {
		err := svc.DeletePost(ctx, input.ID)
		if err != nil {
			return nil, err
		}

		resp := &DeletePostOutput{}
		resp.Body.Message = "Post deleted successfully"
		resp.Body.ID = input.ID

		return resp, nil
	})

	// GET /api/posts/user/{userId}
	huma.Register(api, huma.Operation{
		OperationID: "get-posts-by-user",
		Method:      http.MethodGet,
		Path:        "/api/posts/user/{userId}",
		Summary:     "Get posts by user",
		Description: "Retrieve all posts created by a specific user",
		Tags:        []string{"Posts"},
	}, func(ctx context.Context, input *GetPostsByUserInput) (*GetPostsByUserOutput, error) {
		posts, err := svc.GetPostsByUserID(ctx, input.UserID)
		if err != nil {
			return nil, err
		}

		return &GetPostsByUserOutput{Body: posts}, nil
	})
}
