// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package sqlc

import (
	"context"
	"time"
)

const CountCommentsByPost = `-- name: CountCommentsByPost :one
SELECT COUNT(*)
FROM comments
WHERE post_id = $1
`

func (q *Queries) CountCommentsByPost(ctx context.Context, postID int32) (int64, error) {
	row := q.db.QueryRow(ctx, CountCommentsByPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateComment = `-- name: CreateComment :one
INSERT INTO comments (content, post_id, user_id)
VALUES ($1, $2, $3)
RETURNING id,
    content,
    post_id,
    user_id,
    created_at,
    updated_at
`

type CreateCommentParams struct {
	Content string `db:"content" json:"content"`
	PostID  int32  `db:"post_id" json:"post_id"`
	UserID  int32  `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (*Comment, error) {
	row := q.db.QueryRow(ctx, CreateComment, arg.Content, arg.PostID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteComment, id)
	return err
}

const GetCommentByID = `-- name: GetCommentByID :one
SELECT c.id,
    c.content,
    c.post_id,
    c.user_id,
    c.created_at,
    c.updated_at,
    u.name as user_name,
    u.email as user_email
FROM comments c
    JOIN users u ON c.user_id = u.id
WHERE c.id = $1
`

type GetCommentByIDRow struct {
	ID        int32     `db:"id" json:"id"`
	Content   string    `db:"content" json:"content"`
	PostID    int32     `db:"post_id" json:"post_id"`
	UserID    int32     `db:"user_id" json:"user_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	UserName  string    `db:"user_name" json:"user_name"`
	UserEmail string    `db:"user_email" json:"user_email"`
}

func (q *Queries) GetCommentByID(ctx context.Context, id int32) (*GetCommentByIDRow, error) {
	row := q.db.QueryRow(ctx, GetCommentByID, id)
	var i GetCommentByIDRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.UserEmail,
	)
	return &i, err
}

const GetCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT c.id,
    c.content,
    c.post_id,
    c.user_id,
    c.created_at,
    c.updated_at,
    u.name as user_name,
    u.email as user_email
FROM comments c
    JOIN users u ON c.user_id = u.id
WHERE c.post_id = $1
ORDER BY c.created_at ASC
`

type GetCommentsByPostIDRow struct {
	ID        int32     `db:"id" json:"id"`
	Content   string    `db:"content" json:"content"`
	PostID    int32     `db:"post_id" json:"post_id"`
	UserID    int32     `db:"user_id" json:"user_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	UserName  string    `db:"user_name" json:"user_name"`
	UserEmail string    `db:"user_email" json:"user_email"`
}

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID int32) ([]*GetCommentsByPostIDRow, error) {
	rows, err := q.db.Query(ctx, GetCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCommentsByPostIDRow{}
	for rows.Next() {
		var i GetCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.PostID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id,
    content,
    post_id,
    user_id,
    created_at,
    updated_at
`

type UpdateCommentParams struct {
	ID      int32  `db:"id" json:"id"`
	Content string `db:"content" json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (*Comment, error) {
	row := q.db.QueryRow(ctx, UpdateComment, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.PostID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
