// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountPosts = `-- name: CountPosts :one
SELECT COUNT(*)
FROM posts
`

func (q *Queries) CountPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPostsByUser = `-- name: CountPostsByUser :one
SELECT COUNT(*)
FROM posts
WHERE user_id = $1
`

func (q *Queries) CountPostsByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, CountPostsByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePost = `-- name: CreatePost :one
INSERT INTO posts (title, content, user_id, published)
VALUES ($1, $2, $3, $4)
RETURNING id,
    title,
    content,
    user_id,
    published,
    created_at,
    updated_at
`

type CreatePostParams struct {
	Title     string      `db:"title" json:"title"`
	Content   string      `db:"content" json:"content"`
	UserID    int32       `db:"user_id" json:"user_id"`
	Published pgtype.Bool `db:"published" json:"published"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (*Post, error) {
	row := q.db.QueryRow(ctx, CreatePost,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.Published,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeletePost, id)
	return err
}

const GetPostByID = `-- name: GetPostByID :one
SELECT p.id,
    p.title,
    p.content,
    p.user_id,
    p.published,
    p.created_at,
    p.updated_at,
    u.name as user_name,
    u.email as user_email
FROM posts p
    JOIN users u ON p.user_id = u.id
WHERE p.id = $1
`

type GetPostByIDRow struct {
	ID        int32       `db:"id" json:"id"`
	Title     string      `db:"title" json:"title"`
	Content   string      `db:"content" json:"content"`
	UserID    int32       `db:"user_id" json:"user_id"`
	Published pgtype.Bool `db:"published" json:"published"`
	CreatedAt time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt time.Time   `db:"updated_at" json:"updated_at"`
	UserName  string      `db:"user_name" json:"user_name"`
	UserEmail string      `db:"user_email" json:"user_email"`
}

func (q *Queries) GetPostByID(ctx context.Context, id int32) (*GetPostByIDRow, error) {
	row := q.db.QueryRow(ctx, GetPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.UserEmail,
	)
	return &i, err
}

const GetPosts = `-- name: GetPosts :many
SELECT p.id,
    p.title,
    p.content,
    p.user_id,
    p.published,
    p.created_at,
    p.updated_at,
    u.name as user_name,
    u.email as user_email
FROM posts p
    JOIN users u ON p.user_id = u.id
ORDER BY p.created_at DESC
`

type GetPostsRow struct {
	ID        int32       `db:"id" json:"id"`
	Title     string      `db:"title" json:"title"`
	Content   string      `db:"content" json:"content"`
	UserID    int32       `db:"user_id" json:"user_id"`
	Published pgtype.Bool `db:"published" json:"published"`
	CreatedAt time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt time.Time   `db:"updated_at" json:"updated_at"`
	UserName  string      `db:"user_name" json:"user_name"`
	UserEmail string      `db:"user_email" json:"user_email"`
}

func (q *Queries) GetPosts(ctx context.Context) ([]*GetPostsRow, error) {
	rows, err := q.db.Query(ctx, GetPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPostsRow{}
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPostsByUserID = `-- name: GetPostsByUserID :many
SELECT id,
    title,
    content,
    user_id,
    published,
    created_at,
    updated_at
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPostsByUserID(ctx context.Context, userID int32) ([]*Post, error) {
	rows, err := q.db.Query(ctx, GetPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPublishedPosts = `-- name: GetPublishedPosts :many
SELECT p.id,
    p.title,
    p.content,
    p.user_id,
    p.published,
    p.created_at,
    p.updated_at,
    u.name as user_name,
    u.email as user_email
FROM posts p
    JOIN users u ON p.user_id = u.id
WHERE p.published = true
ORDER BY p.created_at DESC
`

type GetPublishedPostsRow struct {
	ID        int32       `db:"id" json:"id"`
	Title     string      `db:"title" json:"title"`
	Content   string      `db:"content" json:"content"`
	UserID    int32       `db:"user_id" json:"user_id"`
	Published pgtype.Bool `db:"published" json:"published"`
	CreatedAt time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt time.Time   `db:"updated_at" json:"updated_at"`
	UserName  string      `db:"user_name" json:"user_name"`
	UserEmail string      `db:"user_email" json:"user_email"`
}

func (q *Queries) GetPublishedPosts(ctx context.Context) ([]*GetPublishedPostsRow, error) {
	rows, err := q.db.Query(ctx, GetPublishedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPublishedPostsRow{}
	for rows.Next() {
		var i GetPublishedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2,
    content = $3,
    user_id = $4,
    published = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id,
    title,
    content,
    user_id,
    published,
    created_at,
    updated_at
`

type UpdatePostParams struct {
	ID        int32       `db:"id" json:"id"`
	Title     string      `db:"title" json:"title"`
	Content   string      `db:"content" json:"content"`
	UserID    int32       `db:"user_id" json:"user_id"`
	Published pgtype.Bool `db:"published" json:"published"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (*Post, error) {
	row := q.db.QueryRow(ctx, UpdatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.Published,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdatePostPublished = `-- name: UpdatePostPublished :one
UPDATE posts
SET published = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id,
    title,
    content,
    user_id,
    published,
    created_at,
    updated_at
`

type UpdatePostPublishedParams struct {
	ID        int32       `db:"id" json:"id"`
	Published pgtype.Bool `db:"published" json:"published"`
}

func (q *Queries) UpdatePostPublished(ctx context.Context, arg UpdatePostPublishedParams) (*Post, error) {
	row := q.db.QueryRow(ctx, UpdatePostPublished, arg.ID, arg.Published)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
