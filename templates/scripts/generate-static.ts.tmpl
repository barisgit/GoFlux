#!/usr/bin/env tsx

// Static Site Generation script for {{.ProjectName}}
// Generated by GoFlux CLI - customize as needed

import { readFileSync, writeFileSync, mkdirSync, existsSync } from 'fs'
import { join, dirname } from 'path'

interface Route {
  path: string
  outputFile: string
}

// Routes to pre-render
const routes: Route[] = [
  { path: '/', outputFile: 'index.html' },
  { path: '/about', outputFile: 'about.html' },
  // Add more routes as needed
]

async function generateStaticFiles() {
  console.log('üîß Generating static HTML files...')
  
  const distDir = 'frontend/dist'
  
  // Check if frontend build exists
  if (!existsSync(join(distDir, 'index.html'))) {
    console.error('‚ùå Frontend build not found. Run frontend build first.')
    process.exit(1)
  }

  // Read the base index.html
  const indexPath = join(distDir, 'index.html')
  let baseHtml = readFileSync(indexPath, 'utf-8')

  // For each route, generate a static HTML file
  let generatedCount = 0
  
  for (const route of routes) {
    try {
      // For now, we'll copy index.html and let client-side routing handle it
      // In a more advanced setup, you'd render the route server-side here
      let html = baseHtml
      
      // Customize HTML for each route (meta tags, title, etc.)
      html = html.replace(
        '<title>{{.ProjectName}}</title>',
        `<title>{{.ProjectName}} - ${getPageTitle(route.path)}</title>`
      )
      
      // Add route-specific meta tags
      html = html.replace(
        '</head>',
        `  <meta name="description" content="${getPageDescription(route.path)}" />
  <meta property="og:title" content="{{.ProjectName}} - ${getPageTitle(route.path)}" />
  <meta property="og:description" content="${getPageDescription(route.path)}" />
</head>`
      )

      // Write the file
      const outputPath = join(distDir, route.outputFile)
      ensureDirectoryExists(dirname(outputPath))
      writeFileSync(outputPath, html, 'utf-8')
      
      console.log(`‚úÖ Generated ${route.outputFile} for ${route.path}`)
      generatedCount++
    } catch (error) {
      console.error(`‚ùå Failed to generate ${route.outputFile}:`, error)
    }
  }

  console.log(`üéâ Generated ${generatedCount} static HTML files`)
}

function getPageTitle(path: string): string {
  switch (path) {
    case '/':
      return 'Home'
    case '/about':
      return 'About'
    default:
      return 'Page'
  }
}

function getPageDescription(path: string): string {
  switch (path) {
    case '/':
      return 'Welcome to {{.ProjectName}}'
    case '/about':
      return 'Learn more about {{.ProjectName}}'
    default:
      return '{{.ProjectName}} - A modern full-stack application'
  }
}

function ensureDirectoryExists(dir: string) {
  if (!existsSync(dir)) {
    mkdirSync(dir, { recursive: true })
  }
}

// Run the generator
generateStaticFiles().catch((error) => {
  console.error('‚ùå Static generation failed:', error)
  process.exit(1)
}) 