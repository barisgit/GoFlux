# {{.ProjectName}} - GoFlux Project Makefile
# Generated by GoFlux CLI

.PHONY: help build build-linux dev clean install test deps

# Default target
help:
	@echo "ðŸš€ {{.ProjectName}} - Available Commands:"
	@echo ""
	@echo "  make build       - Build production binary with embedded assets"
	@echo "  make build-linux - Build production binary for Linux"
	@echo "  make dev         - Start development servers with hot reload"
	@echo "  make clean       - Clean build artifacts"
	@echo "  make install     - Install dependencies"
	@echo "  make test        - Run tests"
	@echo "  make deps        - Install/update dependencies"
	@echo ""

# Production build - single binary with embedded assets
build:
	@echo "ðŸš€ Building {{.ProjectName}} for production..."
	flux build

# Production build for Linux (useful for CI/CD)
build-linux:
	@echo "ðŸš€ Building {{.ProjectName}} for Linux..."
	flux build --linux

# Development mode with hot reload
dev:
	@echo "ðŸš€ Starting {{.ProjectName}} development environment..."
	flux dev

# Clean build artifacts
clean:
	@echo "ðŸ§¹ Cleaning build artifacts..."
	flux build --clean
	rm -rf dist/
	rm -rf frontend/dist/
	rm -rf frontend/node_modules/.vite/
	rm -rf tmp/
	rm -rf build/

# Install dependencies
install: deps

# Install/update all dependencies
deps:
	@echo "ðŸ“¦ Installing dependencies..."
	go mod download
	@if [ -f "frontend/package.json" ]; then \
		cd frontend && pnpm install; \
	fi

# Run tests
test:
	@echo "ðŸ§ª Running tests..."
	go test ./...
	@if [ -f "frontend/package.json" ]; then \
		cd frontend && pnpm test; \
	fi

# Quick development setup (first time)
setup: deps
	@echo "âœ… {{.ProjectName}} setup complete!"
	@echo "Run 'make dev' to start development servers"

# Production deployment helper
deploy: build
	@echo "ðŸ“¦ Production binary ready: ./dist/server"
	@echo "ðŸš€ Deploy with: scp ./dist/server user@server:/path/" 