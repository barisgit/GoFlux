# {{.ProjectName}}

🚀 **A full-stack application built with GoFlux**

This project combines a Go backend with a modern TypeScript frontend, all managed by the GoFlux CLI framework.

## ✨ Features

- 🎯 **Type Safe**: End-to-end type safety from Go → TypeScript
- ⚡ **Fast Development**: Hot reload for both backend and frontend  
- 📦 **Single Binary**: Zero dependencies in production
- 🔧 **Auto-Generated**: Types and API client generated from Go code
- 🌐 **Modern Frontend**: {{.Router}} backend with TanStack Router frontend

## 🚀 Quick Start

### Development

```bash
# Start development servers (first run will setup frontend)
flux dev

# Or use make
make dev
```

Visit:
- **Application**: http://localhost:3000 (proxy)
- **Frontend**: http://localhost:3001 (direct)  
- **Backend**: http://localhost:{{.BackendPort}} (direct)
- **API Docs**: http://localhost:3000/docs

### Production Build

```bash
# Build single production binary
flux build

# Or use make
make build

# Run the binary
./dist/server
```

## 🏗️ Project Structure

```
{{.ProjectName}}/
├── flux.yaml              # GoFlux configuration
├── Makefile               # Build commands
├── go.mod                 # Go dependencies
├── cmd/
│   └── server/            # Go backend server
├── internal/
│   ├── api/               # API routes & handlers
│   ├── db/                # Database layer
│   ├── static/            # Static file serving (auto-generated)
│   └── types/             # Go type definitions
├── frontend/              # TypeScript frontend
│   ├── src/
│   │   ├── types/         # Generated TypeScript types
│   │   └── lib/           # Generated API client
│   └── package.json
└── scripts/               # Build and deployment scripts
    └── generate-static.ts # Static site generation
```

## 🎛️ Configuration

Edit `flux.yaml` to customize:

```yaml
name: {{.ProjectName}}
frontend:
  framework: tanstack-router
  dev_cmd: cd frontend && pnpm dev --port 3001 --host
  build_cmd: cd frontend && pnpm build
  static_gen:
    enabled: true
    spa_routing: true
backend:
  port: "{{.BackendPort}}"
  router: {{.Router}}
build:
  output_dir: dist
  binary_name: server
  embed_static: true
```

## 🔧 Available Commands

### GoFlux CLI

```bash
flux dev          # Start development environment
flux build        # Build production binary
flux build --linux # Cross-compile for Linux
```

### Make Commands

```bash
make help         # Show all commands
make dev          # Start development
make build        # Production build
make build-linux  # Linux build
make clean        # Clean artifacts
make deps         # Install dependencies
make test         # Run tests
```

## 🎯 Type Generation

Types are automatically generated from your Go structs:

```go
// internal/types/user.go
type User struct {
    ID    int    `json:"id"`
    Name  string `json:"name"`
    Email string `json:"email"`
}
```

Generates TypeScript:

```typescript
// frontend/src/types/generated.d.ts
export interface User {
  id: number
  name: string
  email: string
}
```

And API client:

```typescript
// frontend/src/lib/api-client.ts
export const api = {
  users: {
    list: async (): Promise<ApiResponse<User[]>> => { /* ... */ },
    get: async (id: number): Promise<ApiResponse<User>> => { /* ... */ },
    create: async (data: Omit<User, 'id'>): Promise<ApiResponse<User>> => { /* ... */ },
    update: async (id: number, data: Partial<User>): Promise<ApiResponse<User>> => { /* ... */ },
    delete: async (id: number): Promise<ApiResponse<any>> => { /* ... */ },
  }
}
```

## 🌐 API Development

Add new endpoints in `internal/api/`:

```go
// internal/api/users.go
func SetupUserRoutes(api huma.API, db *db.DB) {
    huma.Register(api, huma.Operation{
        OperationID: "list-users",
        Method:      http.MethodGet,
        Path:        "/api/users",
        Summary:     "List Users",
    }, func(ctx context.Context, input *struct{}) (*UsersOutput, error) {
        // Your logic here
    })
}
```

Types and frontend client are regenerated automatically during development.

## 📦 Deployment

### Single Binary Deployment

```bash
# Build
make build

# Deploy (example)
scp ./dist/server user@production:/app/
ssh user@production '/app/server'
```

### Docker Deployment

```dockerfile
FROM scratch
COPY ./dist/server /server
EXPOSE 3000
CMD ["/server"]
```

## 🧪 Testing

```bash
# Backend tests
go test ./...

# Frontend tests (if configured)
cd frontend && pnpm test

# All tests
make test
```

## 📚 Learn More

- [GoFlux Documentation](https://github.com/yourorg/goflux)
- [Huma API Framework](https://huma.rocks/)
- [TanStack Router](https://tanstack.com/router/)

## 🤝 Contributing

1. Make changes to your code
2. Run `flux dev` to test
3. Run `flux build` to verify production build
4. Commit your changes

The GoFlux CLI handles all the complex build orchestration for you!

---

Built with ❤️ using [GoFlux](https://github.com/yourorg/goflux) 