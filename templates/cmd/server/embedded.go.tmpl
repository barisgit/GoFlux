//go:build embed_static

// WARNING: This file is auto-generated by GoFlux CLI.
// DO NOT MODIFY - Changes will be overwritten during builds.

package main

import (
	"embed"
	"io/fs"
	"net/http"
	"path/filepath"
	"strings"
)

// Embedded frontend assets (built frontend files)
//go:embed static/*
var embeddedAssets embed.FS

// getEmbeddedStaticHandler returns an HTTP handler for serving embedded static files
func getEmbeddedStaticHandler() http.Handler {
	// Create sub-filesystem for the static directory
	staticFS, err := fs.Sub(embeddedAssets, "static")
	if err != nil {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			http.Error(w, "Embedded assets not available", http.StatusNotFound)
		})
	}

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		path := r.URL.Path
		
		// Skip API routes
		if strings.HasPrefix(path, "/api/") || strings.HasPrefix(path, "/docs") || strings.HasPrefix(path, "/openapi") {
			http.NotFound(w, r)
			return
		}
		
		// Remove leading slash
		if strings.HasPrefix(path, "/") {
			path = path[1:]
		}
		
		// If path is empty, serve index.html
		if path == "" {
			path = "index.html"
		}
		
		// Check if file exists in embedded FS
		if _, err := staticFS.Open(path); err != nil {
			// SPA routing: serve index.html for non-file requests
			if !strings.Contains(path, ".") {
				path = "index.html"
			} else {
				http.NotFound(w, r)
				return
			}
		}
		
		// Set appropriate content type
		ext := filepath.Ext(path)
		switch ext {
		case ".html":
			w.Header().Set("Content-Type", "text/html; charset=utf-8")
		case ".css":
			w.Header().Set("Content-Type", "text/css; charset=utf-8")
		case ".js":
			w.Header().Set("Content-Type", "application/javascript; charset=utf-8")
		case ".json":
			w.Header().Set("Content-Type", "application/json; charset=utf-8")
		case ".png":
			w.Header().Set("Content-Type", "image/png")
		case ".jpg", ".jpeg":
			w.Header().Set("Content-Type", "image/jpeg")
		case ".svg":
			w.Header().Set("Content-Type", "image/svg+xml")
		case ".ico":
			w.Header().Set("Content-Type", "image/x-icon")
		case ".woff", ".woff2":
			w.Header().Set("Content-Type", "font/woff")
		case ".ttf":
			w.Header().Set("Content-Type", "font/ttf")
		}
		
		// Set caching headers
		if strings.Contains(path, "assets/") || ext == ".css" || ext == ".js" {
			w.Header().Set("Cache-Control", "public, max-age=31536000") // 1 year
		} else {
			w.Header().Set("Cache-Control", "public, max-age=300") // 5 minutes
		}
		
		// Serve the file
		http.FileServer(http.FS(staticFS)).ServeHTTP(w, r)
	})
} 