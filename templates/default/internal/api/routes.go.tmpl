package api

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"strconv"
	"{{.ModuleName}}/internal/db"
	"{{.ModuleName}}/internal/procedures"
	"{{.ModuleName}}/internal/types"

	"github.com/barisgit/goflux"
	"github.com/danielgtaylor/huma/v2"
)

// SetupRoutes configures all API routes for Huma using modern GoFlux patterns
func SetupRoutes(api huma.API, database db.Database) {
	// Add enhanced health check with features showcase
	setupPublicRoutes(api, database)
	
	// Setup protected routes that require authentication
	setupProtectedRoutes(api, database)
}

// ============================================================================
// INPUT & OUTPUT TYPES
// ============================================================================

// Health Check
type InfoOutput struct {
	Body struct {
		Status   string            `json:"status" example:"ok" doc:"Service status"`
		Message  string            `json:"message" example:"{{.ProjectName}} API is running" doc:"Status message"`
		Version  string            `json:"version" example:"1.0.0" doc:"Service version"`
		Features []string          `json:"features" doc:"Available features"`
		Endpoints map[string]string `json:"endpoints" doc:"Available endpoint categories"`
	}
}

// User Management
type GetUsersOutput struct {
	Body struct {
		Users      []types.User                     `json:"users" doc:"List of users"`
		Pagination *procedures.PaginationParams    `json:"pagination" doc:"Pagination info"`
		Sort       *procedures.SortParams          `json:"sort" doc:"Sort parameters"`
		Filters    *procedures.FilterParams        `json:"filters" doc:"Applied filters"`
		Total      int                             `json:"total" doc:"Total count"`
		Message    string                          `json:"message" doc:"Success message"`
	}
}

type GetUserInput struct {
	ID int `path:"id" minimum:"1" doc:"User ID" example:"1"`
}

type GetUserOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		User    types.User `json:"user" doc:"User data"`
	}
}

type CreateUserInput struct {
	Body types.CreateUserRequest `json:"user" doc:"User data to create"`
}

type CreateUserOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		User    types.User `json:"user" doc:"Created user"`
	}
}

type UpdateUserInput struct {
	ID   int                     `path:"id" minimum:"1" doc:"User ID" example:"1"`
	Body types.UpdateUserRequest `json:"user" doc:"User data to update"`
}

type UpdateUserOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		User    types.User `json:"user" doc:"Updated user"`
	}
}

type DeleteUserInput struct {
	ID int `path:"id" minimum:"1" doc:"User ID" example:"1"`
}

type DeleteUserOutput struct {
	Body struct {
		Message string `json:"message" example:"User deleted successfully" doc:"Success message"`
		ID      int    `json:"id" example:"1" doc:"Deleted user ID"`
	}
}

// Post Management
type GetPostsOutput struct {
	Body struct {
		Posts      []types.Post                     `json:"posts" doc:"List of posts"`
		Pagination *procedures.PaginationParams    `json:"pagination" doc:"Pagination info"`
		Sort       *procedures.SortParams          `json:"sort" doc:"Sort parameters"`
		Filters    *procedures.FilterParams        `json:"filters" doc:"Applied filters"`
		Total      int                             `json:"total" doc:"Total count"`
		Message    string                          `json:"message" doc:"Success message"`
	}
}

type GetPostInput struct {
	ID int `path:"id" minimum:"1" doc:"Post ID" example:"1"`
}

type GetPostOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		Post    types.Post `json:"post" doc:"Post data"`
	}
}

type CreatePostInput struct {
	Body types.CreatePostRequest `json:"post" doc:"Post data to create"`
}

type CreatePostOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		Post    types.Post `json:"post" doc:"Created post"`
	}
}

type UpdatePostInput struct {
	ID   int                     `path:"id" minimum:"1" doc:"Post ID" example:"1"`
	Body types.UpdatePostRequest `json:"post" doc:"Post data to update"`
}

type UpdatePostOutput struct {
	Body struct {
		Message string     `json:"message" doc:"Success message"`
		Post    types.Post `json:"post" doc:"Updated post"`
	}
}

type DeletePostInput struct {
	ID int `path:"id" minimum:"1" doc:"Post ID" example:"1"`
}

type DeletePostOutput struct {
	Body struct {
		Message string `json:"message" example:"Post deleted successfully" doc:"Success message"`
		ID      int    `json:"id" example:"1" doc:"Deleted post ID"`
	}
}

type GetPostsByUserInput struct {
	UserID int `path:"userId" minimum:"1" doc:"User ID" example:"1"`
}

type GetPostsByUserOutput struct {
	Body struct {
		Posts   []types.Post `json:"posts" doc:"List of posts by user"`
		Message string       `json:"message" doc:"Success message"`
	}
}

// ============================================================================
// PUBLIC ROUTES - No Authentication Required
// ============================================================================

func setupPublicRoutes(api huma.API, database db.Database) {
	// Enhanced info endpoint showcasing GoFlux features
	goflux.Get(api, "/api/info", func(ctx context.Context, input *struct{}) (*InfoOutput, error) {
		return &InfoOutput{
			Body: struct {
				Status   string            `json:"status" example:"ok" doc:"Service status"`
				Message  string            `json:"message" example:"{{.ProjectName}} API is running" doc:"Status message"`
				Version  string            `json:"version" example:"1.0.0" doc:"Service version"`
				Features []string          `json:"features" doc:"Available features"`
				Endpoints map[string]string `json:"endpoints" doc:"Available endpoint categories"`
			}{
				Status:  "ok",
				Message: "{{.ProjectName}} API - Powered by GoFlux with Elegant Dependency Injection",
				Version: "1.0.0",
				Features: []string{
					"Clean Dependency Injection",
					"Automatic Parameter Extraction",
					"tRPC-style Procedures",
					"Built-in Authentication",
					"Dynamic Input Composition",
					"OpenAPI Generation",
					"Middleware Deduplication",
					"Error Handling",
				},
				Endpoints: map[string]string{
					"public":        "/api/info",
					"authenticated": "/api/users, /api/posts",
				},
			},
		}, nil
	}, func(o *huma.Operation) {
		o.Tags = []string{"Public", "Info"}
		o.Summary = "Get API information and features"
		o.Description = "Public endpoint showcasing GoFlux capabilities without authentication"
	})

	// Public demo endpoint with parameter validation
	procedures.PublicProcedure.Get(api, "/api/demo/{value}",
		func(ctx context.Context,
			input *struct {
				Value  string `path:"value" validate:"required,min=3,max=50" doc:"Value to validate" example:"test"`
				Format string `query:"format" enum:"json,xml,plain" default:"json" doc:"Response format"`
				Debug  bool   `query:"debug" doc:"Enable debug mode"`
			},
			logger *slog.Logger,
		) (*struct {
			Body struct {
				Input   interface{} `json:"input" doc:"Parsed input parameters"`
				Valid   bool        `json:"valid" doc:"Validation result"`
				Message string      `json:"message" doc:"Validation message"`
				Debug   interface{} `json:"debug,omitempty" doc:"Debug information"`
			}
		}, error) {
			logger.Info("Demo validation endpoint called",
				"value", input.Value,
				"format", input.Format,
				"debug", input.Debug,
			)

			var debugInfo interface{}
			if input.Debug {
				debugInfo = map[string]interface{}{
					"value_length": len(input.Value),
					"format_used":  input.Format,
					"timestamp":    "2024-01-15T10:30:00Z",
				}
			}

			return &struct {
				Body struct {
					Input   interface{} `json:"input" doc:"Parsed input parameters"`
					Valid   bool        `json:"valid" doc:"Validation result"`
					Message string      `json:"message" doc:"Validation message"`
					Debug   interface{} `json:"debug,omitempty" doc:"Debug information"`
				}
			}{
				Body: struct {
					Input   interface{} `json:"input" doc:"Parsed input parameters"`
					Valid   bool        `json:"valid" doc:"Validation result"`
					Message string      `json:"message" doc:"Validation message"`
					Debug   interface{} `json:"debug,omitempty" doc:"Debug information"`
				}{
					Input: map[string]interface{}{
						"value":  input.Value,
						"format": input.Format,
						"debug":  input.Debug,
					},
					Valid:   len(input.Value) >= 3 && len(input.Value) <= 50,
					Message: fmt.Sprintf("Value '%s' is valid with format '%s'", input.Value, input.Format),
					Debug:   debugInfo,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Validation", "Testing", "Public"}
			o.Summary = "Validate input parameters"
			o.Description = "Demonstrate parameter validation, enums, and debug features"
		},
	)
}

// ============================================================================
// PROTECTED ROUTES - Authentication Required
// ============================================================================

func setupProtectedRoutes(api huma.API, database db.Database) {
	// User management with clean dependency injection
	
	// List users with automatic pagination, sorting, and filtering
	procedures.ListProcedure.Get(api, "/api/users",
		func(ctx context.Context,
			input *struct{},
			logger *slog.Logger,
			currentUser *types.User,
			pagination *procedures.PaginationParams,
			sort *procedures.SortParams,
			filter *procedures.FilterParams,
		) (*GetUsersOutput, error) {
			logger.Info("Listing users",
				"page", pagination.Page,
				"page_size", pagination.PageSize,
				"sort_by", sort.SortBy,
				"search", filter.Search,
				"requested_by", currentUser.ID,
			)

			// Mock users with pagination simulation
			allUsers := []types.User{
				{ID: 1, Name: "John Doe", Email: "john@example.com", Age: 30},
				{ID: 2, Name: "Jane Smith", Email: "jane@example.com", Age: 25},
				{ID: 3, Name: "Bob Johnson", Email: "bob@example.com", Age: 35},
				{ID: 4, Name: "Alice Brown", Email: "alice@example.com", Age: 28},
				{ID: 5, Name: "Charlie Wilson", Email: "charlie@example.com", Age: 32},
			}

			// Apply search filter if provided
			var filteredUsers []types.User
			if filter.Search != "" {
				for _, user := range allUsers {
					if fmt.Sprintf("%s %s", user.Name, user.Email) != filter.Search {
						filteredUsers = append(filteredUsers, user)
					}
				}
			} else {
				filteredUsers = allUsers
			}

			// Simulate pagination
			start := (pagination.Page - 1) * pagination.PageSize
			end := start + pagination.PageSize
			if start >= len(filteredUsers) {
				filteredUsers = []types.User{}
			} else if end > len(filteredUsers) {
				filteredUsers = filteredUsers[start:]
			} else {
				filteredUsers = filteredUsers[start:end]
			}

			return &GetUsersOutput{
				Body: struct {
					Users      []types.User                     `json:"users" doc:"List of users"`
					Pagination *procedures.PaginationParams    `json:"pagination" doc:"Pagination info"`
					Sort       *procedures.SortParams          `json:"sort" doc:"Sort parameters"`
					Filters    *procedures.FilterParams        `json:"filters" doc:"Applied filters"`
					Total      int                             `json:"total" doc:"Total count"`
					Message    string                          `json:"message" doc:"Success message"`
				}{
					Users:      filteredUsers,
					Pagination: pagination,
					Sort:       sort,
					Filters:    filter,
					Total:      len(allUsers),
					Message:    fmt.Sprintf("Retrieved %d users (page %d)", len(filteredUsers), pagination.Page),
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Users", "Protected"}
			o.Summary = "List users with pagination and filtering"
			o.Description = "Get paginated list of users with automatic parameter extraction"
		},
	)

	// Get user by ID
	procedures.ProtectedProcedure.Get(api, "/api/users/{id}",
		func(ctx context.Context,
			input *GetUserInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*GetUserOutput, error) {
			logger.Info("Getting user by ID",
				"user_id", input.ID,
				"requested_by", currentUser.ID,
			)

			// Mock user data - in real app, query database
			user := types.User{
				ID:    input.ID,
				Name:  "John Doe",
				Email: "john@example.com",
				Age:   30,
			}

			return &GetUserOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					User    types.User `json:"user" doc:"User data"`
				}{
					Message: "User retrieved successfully",
					User:    user,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Users", "Protected"}
			o.Summary = "Get user by ID"
			o.Description = "Retrieve a specific user by their ID"
		},
	)

	// Create user
	procedures.ProtectedProcedure.Post(api, "/api/users",
		func(ctx context.Context,
			input *CreateUserInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*CreateUserOutput, error) {
			logger.Info("Creating user",
				"name", input.Body.Name,
				"email", input.Body.Email,
				"created_by", currentUser.ID,
			)

			// Mock user creation
			newUser := types.User{
				ID:    100,
				Name:  input.Body.Name,
				Email: input.Body.Email,
				Age:   input.Body.Age,
			}

			return &CreateUserOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					User    types.User `json:"user" doc:"Created user"`
				}{
					Message: "User created successfully",
					User:    newUser,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Users", "Protected"}
			o.Summary = "Create a new user"
			o.Description = "Create a new user (requires authentication)"
			o.DefaultStatus = http.StatusCreated
		},
	)

	// Update user
	procedures.ProtectedProcedure.Put(api, "/api/users/{id}",
		func(ctx context.Context,
			input *UpdateUserInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*UpdateUserOutput, error) {
			logger.Info("Updating user",
				"user_id", input.ID,
				"updated_by", currentUser.ID,
			)

			user := types.User{
				ID:    input.ID,
				Name:  input.Body.Name,
				Email: input.Body.Email,
				Age:   input.Body.Age,
			}

			return &UpdateUserOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					User    types.User `json:"user" doc:"Updated user"`
				}{
					Message: "User updated successfully",
					User:    user,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Users", "Protected"}
			o.Summary = "Update user"
			o.Description = "Update an existing user's information"
		},
	)

	// Delete user
	procedures.ProtectedProcedure.Delete(api, "/api/users/{id}",
		func(ctx context.Context,
			input *DeleteUserInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*DeleteUserOutput, error) {
			logger.Info("Deleting user",
				"user_id", input.ID,
				"deleted_by", currentUser.ID,
			)

			return &DeleteUserOutput{
				Body: struct {
					Message string `json:"message" example:"User deleted successfully" doc:"Success message"`
					ID      int    `json:"id" example:"1" doc:"Deleted user ID"`
				}{
					Message: "User deleted successfully",
					ID:      input.ID,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Users", "Protected"}
			o.Summary = "Delete user"
			o.Description = "Delete a user from the system"
		},
	)

	// ========================================================================
	// POST ROUTES
	// ========================================================================

	// List posts with advanced filtering
	procedures.ListProcedure.Get(api, "/api/posts",
		func(ctx context.Context,
			input *struct{},
			logger *slog.Logger,
			currentUser *types.User,
			pagination *procedures.PaginationParams,
			sort *procedures.SortParams,
			filter *procedures.FilterParams,
		) (*GetPostsOutput, error) {
			logger.Info("Listing posts",
				"page", pagination.Page,
				"sort_by", sort.SortBy,
				"search", filter.Search,
				"user_id", currentUser.ID,
			)

			// Mock posts
			posts := []types.Post{
				{ID: 1, Title: "Go Programming Basics", Content: "Learn the fundamentals of Go", UserID: 1, Published: true},
				{ID: 2, Title: "Advanced Go Patterns", Content: "Advanced Go programming patterns", UserID: 1, Published: true},
				{ID: 3, Title: "Web Development with Go", Content: "Building web apps with Go", UserID: 2, Published: true},
				{ID: 4, Title: "Microservices in Go", Content: "Building microservices", UserID: 2, Published: false},
			}

			return &GetPostsOutput{
				Body: struct {
					Posts      []types.Post                     `json:"posts" doc:"List of posts"`
					Pagination *procedures.PaginationParams    `json:"pagination" doc:"Pagination info"`
					Sort       *procedures.SortParams          `json:"sort" doc:"Sort parameters"`
					Filters    *procedures.FilterParams        `json:"filters" doc:"Applied filters"`
					Total      int                             `json:"total" doc:"Total count"`
					Message    string                          `json:"message" doc:"Success message"`
				}{
					Posts:      posts,
					Pagination: pagination,
					Sort:       sort,
					Filters:    filter,
					Total:      len(posts),
					Message:    fmt.Sprintf("Retrieved %d posts", len(posts)),
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "List posts with advanced filtering"
			o.Description = "Get paginated list of posts with sorting and filtering capabilities"
		},
	)

	// Get post by ID
	procedures.ProtectedProcedure.Get(api, "/api/posts/{id}",
		func(ctx context.Context,
			input *GetPostInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*GetPostOutput, error) {
			logger.Info("Getting post by ID",
				"post_id", input.ID,
				"requested_by", currentUser.ID,
			)

			post := types.Post{
				ID:      input.ID,
				Title:   "Sample Post",
				Content: "This is a sample post content",
				UserID:  1,
				Published: true,
			}

			return &GetPostOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					Post    types.Post `json:"post" doc:"Post data"`
				}{
					Message: "Post retrieved successfully",
					Post:    post,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "Get post by ID"
			o.Description = "Retrieve a specific post by its ID"
		},
	)

	// Create post
	procedures.ProtectedProcedure.Post(api, "/api/posts",
		func(ctx context.Context,
			input *CreatePostInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*CreatePostOutput, error) {
			logger.Info("Creating post",
				"title", input.Body.Title,
				"author_id", currentUser.ID,
			)

			newPost := types.Post{
				ID:        200,
				Title:     input.Body.Title,
				Content:   input.Body.Content,
				UserID:    currentUser.ID,
				Published: input.Body.Published,
			}

			return &CreatePostOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					Post    types.Post `json:"post" doc:"Created post"`
				}{
					Message: "Post created successfully",
					Post:    newPost,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "Create a new post"
			o.Description = "Create a new blog post (requires authentication)"
			o.DefaultStatus = http.StatusCreated
		},
	)

	// Update post
	procedures.ProtectedProcedure.Put(api, "/api/posts/{id}",
		func(ctx context.Context,
			input *UpdatePostInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*UpdatePostOutput, error) {
			logger.Info("Updating post",
				"post_id", input.ID,
				"updated_by", currentUser.ID,
			)

			post := types.Post{
				ID:        input.ID,
				Title:     input.Body.Title,
				Content:   input.Body.Content,
				UserID:    input.Body.UserID,
				Published: input.Body.Published,
			}

			return &UpdatePostOutput{
				Body: struct {
					Message string     `json:"message" doc:"Success message"`
					Post    types.Post `json:"post" doc:"Updated post"`
				}{
					Message: "Post updated successfully",
					Post:    post,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "Update post"
			o.Description = "Update an existing post's information"
		},
	)

	// Delete post
	procedures.ProtectedProcedure.Delete(api, "/api/posts/{id}",
		func(ctx context.Context,
			input *DeletePostInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*DeletePostOutput, error) {
			logger.Info("Deleting post",
				"post_id", input.ID,
				"deleted_by", currentUser.ID,
			)

			return &DeletePostOutput{
				Body: struct {
					Message string `json:"message" example:"Post deleted successfully" doc:"Success message"`
					ID      int    `json:"id" example:"1" doc:"Deleted post ID"`
				}{
					Message: "Post deleted successfully",
					ID:      input.ID,
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "Delete post"
			o.Description = "Delete a post from the system"
		},
	)

	// Get posts by user
	procedures.ProtectedProcedure.Get(api, "/api/posts/user/{userId}",
		func(ctx context.Context,
			input *GetPostsByUserInput,
			logger *slog.Logger,
			currentUser *types.User,
		) (*GetPostsByUserOutput, error) {
			logger.Info("Getting posts by user",
				"target_user_id", input.UserID,
				"requested_by", currentUser.ID,
			)

			// Mock posts for the user
			posts := []types.Post{
				{ID: 1, Title: "User's First Post", Content: "Content by user " + strconv.Itoa(input.UserID), UserID: input.UserID, Published: true},
				{ID: 2, Title: "User's Second Post", Content: "More content by user " + strconv.Itoa(input.UserID), UserID: input.UserID, Published: true},
			}

			return &GetPostsByUserOutput{
				Body: struct {
					Posts   []types.Post `json:"posts" doc:"List of posts by user"`
					Message string       `json:"message" doc:"Success message"`
				}{
					Posts:   posts,
					Message: fmt.Sprintf("Retrieved %d posts for user %d", len(posts), input.UserID),
				},
			}, nil
		},
		func(o *huma.Operation) {
			o.Tags = []string{"Posts", "Protected"}
			o.Summary = "Get posts by user"
			o.Description = "Retrieve all posts created by a specific user"
		},
	)
} 