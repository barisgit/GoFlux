// Auto-generated API client from Go routes
// Generated by: go run cmd/generate-types/main.go
// Do not edit manually

import type { CreatePostRequest, CreateProfileRequest, CreateUserRequest, Post, Profile, SearchRequest, SearchResult, User } from '../types/generated'

export interface ApiResponse<T> {
  data?: T
  error?: string
}

async function request<T>(path: string, options: RequestInit = {}): Promise<ApiResponse<T>> {
  try {
    const response = await fetch(`/api${path}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    })

    if (!response.ok) {
      return { error: `HTTP ${response.status}: ${response.statusText}` }
    }

    const data = await response.json()
    return { data }
  } catch (error) {
    return { error: error instanceof Error ? error.message : 'Unknown error' }
  }
}

export const api = {
  health: {
    list: async (): Promise<ApiResponse<any>> => {
      return request<any>(`/health`)
    }
  },
  posts: {
    create: async (data: Omit<CreatePostRequest, 'id'>): Promise<ApiResponse<Post>> => {
      return request<Post>(`/posts`, {
        method: 'POST',
        body: JSON.stringify(data),
      })
    },
    get: async (id: number): Promise<ApiResponse<Post>> => {
      return request<Post>(`/posts/${id}`)
    },
    list: async (): Promise<ApiResponse<Post[]>> => {
      return request<Post[]>(`/posts`)
    }
  },
  search: {
    create: async (data: Omit<SearchRequest, 'id'>): Promise<ApiResponse<SearchResult>> => {
      return request<SearchResult>(`/search`, {
        method: 'POST',
        body: JSON.stringify(data),
      })
    }
  },
  users: {
    create: async (data: Omit<CreateUserRequest, 'id'>): Promise<ApiResponse<User>> => {
      return request<User>(`/users`, {
        method: 'POST',
        body: JSON.stringify(data),
      })
    },
    get: async (id: number): Promise<ApiResponse<User>> => {
      return request<User>(`/users/${id}`)
    },
    list: async (): Promise<ApiResponse<User[]>> => {
      return request<User[]>(`/users`)
    },
    profile: {
      create: async (id: number, data: Omit<CreateProfileRequest, 'id'>): Promise<ApiResponse<Profile>> => {
        return request<Profile>(`/users/${id}/profile`, {
          method: 'POST',
          body: JSON.stringify(data),
        })
      },
      get: async (id: number): Promise<ApiResponse<Profile>> => {
        return request<Profile>(`/users/${id}/profile`)
      },
      update: async (id: number, data: Partial<CreateProfileRequest>): Promise<ApiResponse<Profile>> => {
        return request<Profile>(`/users/${id}/profile`, {
          method: 'PUT',
          body: JSON.stringify(data),
        })
      }
    }
  }
}

export type API = typeof api
