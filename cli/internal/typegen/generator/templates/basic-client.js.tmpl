// Auto-generated API client from Go routes
// Generated by GoFlux type generation system
// Do not edit manually

/**
 * Builds a query string from parameters object
 * @param {Object} params - Query parameters
 * @returns {string} Query string
 */
function buildQueryString(params) {
  if (!params) return '';
  const searchParams = new URLSearchParams();
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      searchParams.append(key, String(value));
    }
  });
  const queryString = searchParams.toString();
  return queryString ? '?' + queryString : '';
}

/**
 * Makes an API request to the server
 * @param {string} path - The API path
 * @param {RequestInit} options - Fetch options
 * @returns {Promise<{success: boolean, data?: any, error?: any}>}
 */
async function request(path, options = {}) {
  try {
    const response = await fetch(`/api${path}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    })

    if (!response.ok) {
      try {
        // Try to parse Huma error format
        const errorData = await response.json()
        return { success: false, error: errorData, data: null }
      } catch {
        // Fallback to simple error if JSON parsing fails
        const errorText = await response.text()
        return { 
          success: false, 
          error: {
            title: response.statusText,
            status: response.status,
            detail: errorText || response.statusText
          },
          data: null
        }
      }
    }

    const data = await response.json()
    return { success: true, data }
  } catch (error) {
    return { 
      success: false, 
      error: {
        title: 'Network Error',
        status: 0,
        detail: error instanceof Error ? error.message : 'Unknown error'
      },
      data: null
    }
  }
}

{{.APIObject}}

// Export for CommonJS and ES modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { api }
} else if (typeof window !== 'undefined') {
  window.api = api
} 