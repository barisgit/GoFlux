{{if .Description}}/**
 * {{.Description}}
 */{{end}}
{
{{if .ReactQueryEnabled}}  useQuery: ({{.QueryParameterSignature}}options?: Omit<UseQueryOptions<{{.ResponseType}}, Error>, 'queryKey' | 'queryFn'>) => {
    return useQuery({
      queryKey: ['{{.QueryKey}}'{{if .HasQueryParams}}, params{{end}}],
      queryFn: async () => {
{{if .HasQueryParams}}        const queryString = params ? buildQueryString(params) : '';
{{end}}        return trpcRequest<{{.ResponseType}}>(`{{.RequestPath}}{{if .HasQueryParams}}${queryString}{{end}}`{{if .RequiresAuth}}, {}, {{.RequiresAuth}}, '{{.AuthType}}'{{end}})
      },
      ...options,
    })
  },
  queryOptions: ({{.QueryOptionsParameterSignature}}) => ({
    queryKey: ['{{.QueryKey}}'{{if .HasQueryParams}}, params{{end}}] as const,
    queryFn: async () => {
{{if .HasQueryParams}}      const queryString = params ? buildQueryString(params) : '';
{{end}}      return trpcRequest<{{.ResponseType}}>(`{{.RequestPath}}{{if .HasQueryParams}}${queryString}{{end}}`{{if .RequiresAuth}}, {}, {{.RequiresAuth}}, '{{.AuthType}}'{{end}})
    },
  }),
  query: {{end}}async ({{.ParameterSignature}}): Promise<{{.ResponseType}}> => {
{{if .HasQueryParams}}const queryString = params ? buildQueryString(params) : '';
{{end}}    return trpcRequest<{{.ResponseType}}>(`{{.RequestPath}}{{if .HasQueryParams}}${queryString}{{end}}`{{if .RequiresAuth}}, {}, {{.RequiresAuth}}, '{{.AuthType}}'{{end}})
  }{{if .ReactQueryEnabled}}{{end}}
} 