// @ts-nocheck
// Auto-generated API client from Go routes
// Generated by GoFlux type generation system
// Do not edit manually

{{if .UsedTypes}}import type { {{join .UsedTypes ", "}} } from '{{.TypesImport}}'{{end}}

export interface HumaErrorDetail {
  message: string
  location: string
  value: unknown
}

export interface HumaError {
  $schema?: string
  title: string
  status: number
  detail: string
  errors?: HumaErrorDetail[]
}

export type ApiResult<T> = 
  | { success: true; data: T }
  | { success: false; error: HumaError; data: T }

async function request<T>(path: string, options: RequestInit = {}): Promise<ApiResult<T>> {
  try {
    const response = await fetch(`/api${path}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    })

    if (!response.ok) {
      try {
        // Try to parse Huma error format
        const errorData = await response.json()
        return { success: false, error: errorData, data: {} as T }
      } catch {
        // Fallback to simple error if JSON parsing fails
        const errorText = await response.text()
        return { 
          success: false, 
          error: {
            title: response.statusText,
            status: response.status,
            detail: errorText || response.statusText
          },
          data: {} as T
        }
      }
    }

    const data = await response.json()
    return { success: true, data }
  } catch (error) {
    return { 
      success: false, 
      error: {
        title: 'Network Error',
        status: 0,
        detail: error instanceof Error ? error.message : 'Unknown error'
      },
      data: {} as T
    }
  }
}

{{.APIObject}}

export type API = typeof api 